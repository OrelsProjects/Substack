generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user AppUser @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         AppUser  @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("sessions")
}

model AppUser {
  userId        String    @id @default(cuid()) @map("id")
  displayName   String?   @map("name")
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  photoURL      String?   @map("image")

  role String? @default("admin")

  accounts        Account[]
  sessions        Session[]
  meta            AppUserMetadata?
  settings        AppUserSettings?
  orders          UserOrders[]
  Subscription    Subscription[]
  Recommendations Recommendations[]
  UserNotes       UserNotes[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model AppUserMetadata {
  userMetadataId String  @id @default(cuid())
  userId         String  @unique
  referralCode   String?
  referredBy     String?

  paidStatus String? // "free" | "premium"

  pushToken       String?
  pushTokenMobile String?

  appUser AppUser @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("userMetadata")
}

model AppUserSettings {
  userSettingsId String @id @default(cuid())
  userId         String @unique

  showNotifications Boolean @default(true)

  appUser AppUser @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("userSettings")
}

model UserNotes {
  id String @id @default(cuid())

  text              String
  likes             Int
  comments          Int
  restacks          Int
  isRestack         Boolean
  image             String?
  hasOpenGraphImage Boolean
  publishDate       DateTime?

  userId String

  appUser         AppUser           @relation(fields: [userId], references: [userId], onDelete: Cascade)
  Recommendations Recommendations[]

  @@map("userNotes")
}

model Recommendations {
  id String @id @default(cuid())

  idea    String
  hook    String
  content String
  rating  Float
  handler String

  inspiredBy String?
  userId     String

  userNote UserNotes? @relation(fields: [inspiredBy], references: [id])
  appUser  AppUser    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("recommendations")
}

model CartItems {
  id       String @id @default(cuid())
  currency String
  price    Float

  Orders UserOrders[]

  @@map("cartItems")
}

model UserOrders {
  id         String   @id @default(cuid())
  orderId    String   @unique
  userId     String
  cartItemId String
  quantity   Int
  total      Float
  status     String   @default("pending") // pending, completed, cancelled
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  appUser  AppUser   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  cartItem CartItems @relation(fields: [cartItemId], references: [id], onDelete: Cascade)

  @@map("userOrders")
}

model Subscription {
  id                String    @id @default(cuid())
  userId            String    @unique
  planId            String
  subscriptionId    String    @unique
  startDate         DateTime
  status            String
  nextBillingDate   DateTime?
  lastPaymentDate   DateTime?
  lastPaymentAmount Float?

  appUser  AppUser   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  Payments Payment[]

  @@map("subscriptions")
}

model Payment {
  id             String   @id @default(cuid())
  paymentId      String   @unique
  subscriptionId String
  paidAmount     Float
  paymentStatus  String
  paymentDate    DateTime

  subscription Subscription @relation(fields: [subscriptionId], references: [subscriptionId], onDelete: Cascade)

  @@map("payments")
}

model LinkedInPosts {
  id String @id @default(cuid())

  content     String
  likes       Int
  comments    Int
  shares      Int
  image       String?
  hasVideo    Boolean
  hasCarousel Boolean

  @@map("linkedInPosts")
}
